# -*- coding: utf-8 -*-
"""task 1 datascience

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AlZtjWQODY7684zCWZr29n1fy-ErfTFt
"""

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve
import joblib
import warnings
warnings.filterwarnings("ignore")

# Load the dataset
df = pd.read_csv('heart_disease_dataset.csv')  # Replace with correct path if needed
df.head()

# Check null values
print(df.isnull().sum())

# Encode categorical variables if needed
le = LabelEncoder()
for column in df.columns:
    if df[column].dtype == 'object':
        df[column] = le.fit_transform(df[column])

# Feature-target split
X = df.drop('Heart Disease', axis=1)
y = df['Heart Disease']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


#Trainng and testing
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(rf, X_scaled, y, cv=5)
print("Cross-Validation Accuracy:", np.mean(cv_scores))

# Class distribution
sns.countplot(x='Heart Disease', data=df)
plt.title("Heart Disease Distribution")
plt.show()

# Correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

# Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Decision Tree
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Random Forest
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Checking Statistics
df.describe()

plt.figure(figsize=(6, 5))
sns.scatterplot(data=df, x='Age', y='Cholesterol', hue='Heart Disease', palette='coolwarm')
plt.title('Age vs Cholesterol (colored by Heart Disease)')
plt.xlabel('Age')
plt.ylabel('Cholesterol')
plt.legend(title='Heart Disease')
plt.tight_layout()
plt.show()

models = {'Logistic Regression': lr_pred, 'Decision Tree': dt_pred, 'Random Forest': rf_pred}
for name, pred in models.items():
    print(f"\n=== {name} ===")
    print("Accuracy:", accuracy_score(y_test, pred))
    print("Classification Report:\n", classification_report(y_test, pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, pred))

# Try default Random Forest again without custom max_depth
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# ROC-AUC for Random Forest
rf_probs = rf.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, rf_probs)

plt.plot(fpr, tpr, label='Random Forest (AUC = {:.2f})'.format(roc_auc_score(y_test, rf_probs)))
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()



# List of pairs you want to compare
column_pairs = [
    ('Age', 'Cholesterol'),
    ('Blood Pressure', 'Stress Level'),
    ('Alcohol Intake', 'Cholesterol'),
    ('Age', 'Blood Pressure')
]

for x_col, y_col in column_pairs:
    plt.figure(figsize=(6, 5))
    sns.scatterplot(data=df, x=x_col, y=y_col, hue='Heart Disease', palette='coolwarm')
    plt.title(f'{x_col} vs {y_col} (colored by Heart Disease)')
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.legend(title='Heart Disease')
    plt.tight_layout()
    plt.show()